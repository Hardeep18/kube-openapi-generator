# coding: utf-8

"""
    stash-server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gid': 'int',
        'hostname': 'str',
        'paths': 'list[str]',
        'tree': 'str',
        'uid': 'int',
        'username': 'str'
    }

    attribute_map = {
        'gid': 'gid',
        'hostname': 'hostname',
        'paths': 'paths',
        'tree': 'tree',
        'uid': 'uid',
        'username': 'username'
    }

    def __init__(self, gid=None, hostname=None, paths=None, tree=None, uid=None, username=None):  # noqa: E501
        """ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus - a model defined in Swagger"""  # noqa: E501

        self._gid = None
        self._hostname = None
        self._paths = None
        self._tree = None
        self._uid = None
        self._username = None
        self.discriminator = None

        self.gid = gid
        self.hostname = hostname
        self.paths = paths
        self.tree = tree
        self.uid = uid
        self.username = username

    @property
    def gid(self):
        """Gets the gid of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501


        :return: The gid of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501
        :rtype: int
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.


        :param gid: The gid of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501
        :type: int
        """
        if gid is None:
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501

        self._gid = gid

    @property
    def hostname(self):
        """Gets the hostname of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501


        :return: The hostname of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.


        :param hostname: The hostname of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501
        :type: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def paths(self):
        """Gets the paths of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501


        :return: The paths of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.


        :param paths: The paths of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501
        :type: list[str]
        """
        if paths is None:
            raise ValueError("Invalid value for `paths`, must not be `None`")  # noqa: E501

        self._paths = paths

    @property
    def tree(self):
        """Gets the tree of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501


        :return: The tree of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501
        :rtype: str
        """
        return self._tree

    @tree.setter
    def tree(self, tree):
        """Sets the tree of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.


        :param tree: The tree of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501
        :type: str
        """
        if tree is None:
            raise ValueError("Invalid value for `tree`, must not be `None`")  # noqa: E501

        self._tree = tree

    @property
    def uid(self):
        """Gets the uid of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501


        :return: The uid of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.


        :param uid: The uid of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501
        :type: int
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    @property
    def username(self):
        """Gets the username of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501


        :return: The username of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.


        :param username: The username of this ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGithubAppscodeStashApisRepositoriesV1alpha1SnapshotStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
