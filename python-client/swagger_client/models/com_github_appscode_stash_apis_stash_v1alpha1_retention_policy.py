# coding: utf-8

"""
    stash-server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dry_run': 'bool',
        'keep_daily': 'int',
        'keep_hourly': 'int',
        'keep_last': 'int',
        'keep_monthly': 'int',
        'keep_tags': 'list[str]',
        'keep_weekly': 'int',
        'keep_yearly': 'int',
        'name': 'str',
        'prune': 'bool'
    }

    attribute_map = {
        'dry_run': 'dryRun',
        'keep_daily': 'keepDaily',
        'keep_hourly': 'keepHourly',
        'keep_last': 'keepLast',
        'keep_monthly': 'keepMonthly',
        'keep_tags': 'keepTags',
        'keep_weekly': 'keepWeekly',
        'keep_yearly': 'keepYearly',
        'name': 'name',
        'prune': 'prune'
    }

    def __init__(self, dry_run=None, keep_daily=None, keep_hourly=None, keep_last=None, keep_monthly=None, keep_tags=None, keep_weekly=None, keep_yearly=None, name=None, prune=None):  # noqa: E501
        """ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy - a model defined in Swagger"""  # noqa: E501

        self._dry_run = None
        self._keep_daily = None
        self._keep_hourly = None
        self._keep_last = None
        self._keep_monthly = None
        self._keep_tags = None
        self._keep_weekly = None
        self._keep_yearly = None
        self._name = None
        self._prune = None
        self.discriminator = None

        if dry_run is not None:
            self.dry_run = dry_run
        if keep_daily is not None:
            self.keep_daily = keep_daily
        if keep_hourly is not None:
            self.keep_hourly = keep_hourly
        if keep_last is not None:
            self.keep_last = keep_last
        if keep_monthly is not None:
            self.keep_monthly = keep_monthly
        if keep_tags is not None:
            self.keep_tags = keep_tags
        if keep_weekly is not None:
            self.keep_weekly = keep_weekly
        if keep_yearly is not None:
            self.keep_yearly = keep_yearly
        if name is not None:
            self.name = name
        if prune is not None:
            self.prune = prune

    @property
    def dry_run(self):
        """Gets the dry_run of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501


        :return: The dry_run of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.


        :param dry_run: The dry_run of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :type: bool
        """

        self._dry_run = dry_run

    @property
    def keep_daily(self):
        """Gets the keep_daily of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501


        :return: The keep_daily of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :rtype: int
        """
        return self._keep_daily

    @keep_daily.setter
    def keep_daily(self, keep_daily):
        """Sets the keep_daily of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.


        :param keep_daily: The keep_daily of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :type: int
        """

        self._keep_daily = keep_daily

    @property
    def keep_hourly(self):
        """Gets the keep_hourly of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501


        :return: The keep_hourly of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :rtype: int
        """
        return self._keep_hourly

    @keep_hourly.setter
    def keep_hourly(self, keep_hourly):
        """Sets the keep_hourly of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.


        :param keep_hourly: The keep_hourly of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :type: int
        """

        self._keep_hourly = keep_hourly

    @property
    def keep_last(self):
        """Gets the keep_last of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501


        :return: The keep_last of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :rtype: int
        """
        return self._keep_last

    @keep_last.setter
    def keep_last(self, keep_last):
        """Sets the keep_last of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.


        :param keep_last: The keep_last of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :type: int
        """

        self._keep_last = keep_last

    @property
    def keep_monthly(self):
        """Gets the keep_monthly of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501


        :return: The keep_monthly of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :rtype: int
        """
        return self._keep_monthly

    @keep_monthly.setter
    def keep_monthly(self, keep_monthly):
        """Sets the keep_monthly of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.


        :param keep_monthly: The keep_monthly of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :type: int
        """

        self._keep_monthly = keep_monthly

    @property
    def keep_tags(self):
        """Gets the keep_tags of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501


        :return: The keep_tags of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :rtype: list[str]
        """
        return self._keep_tags

    @keep_tags.setter
    def keep_tags(self, keep_tags):
        """Sets the keep_tags of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.


        :param keep_tags: The keep_tags of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :type: list[str]
        """

        self._keep_tags = keep_tags

    @property
    def keep_weekly(self):
        """Gets the keep_weekly of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501


        :return: The keep_weekly of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :rtype: int
        """
        return self._keep_weekly

    @keep_weekly.setter
    def keep_weekly(self, keep_weekly):
        """Sets the keep_weekly of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.


        :param keep_weekly: The keep_weekly of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :type: int
        """

        self._keep_weekly = keep_weekly

    @property
    def keep_yearly(self):
        """Gets the keep_yearly of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501


        :return: The keep_yearly of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :rtype: int
        """
        return self._keep_yearly

    @keep_yearly.setter
    def keep_yearly(self, keep_yearly):
        """Sets the keep_yearly of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.


        :param keep_yearly: The keep_yearly of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :type: int
        """

        self._keep_yearly = keep_yearly

    @property
    def name(self):
        """Gets the name of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501


        :return: The name of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.


        :param name: The name of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def prune(self):
        """Gets the prune of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501


        :return: The prune of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._prune

    @prune.setter
    def prune(self, prune):
        """Sets the prune of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.


        :param prune: The prune of this ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy.  # noqa: E501
        :type: bool
        """

        self._prune = prune

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGithubAppscodeStashApisStashV1alpha1RetentionPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
