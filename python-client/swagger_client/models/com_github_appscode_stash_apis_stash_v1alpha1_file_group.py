# coding: utf-8

"""
    stash-server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ComGithubAppscodeStashApisStashV1alpha1FileGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'retention_policy_name': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'path': 'path',
        'retention_policy_name': 'retentionPolicyName',
        'tags': 'tags'
    }

    def __init__(self, path=None, retention_policy_name=None, tags=None):  # noqa: E501
        """ComGithubAppscodeStashApisStashV1alpha1FileGroup - a model defined in Swagger"""  # noqa: E501

        self._path = None
        self._retention_policy_name = None
        self._tags = None
        self.discriminator = None

        if path is not None:
            self.path = path
        if retention_policy_name is not None:
            self.retention_policy_name = retention_policy_name
        if tags is not None:
            self.tags = tags

    @property
    def path(self):
        """Gets the path of this ComGithubAppscodeStashApisStashV1alpha1FileGroup.  # noqa: E501

        Source of the backup volumeName:path  # noqa: E501

        :return: The path of this ComGithubAppscodeStashApisStashV1alpha1FileGroup.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ComGithubAppscodeStashApisStashV1alpha1FileGroup.

        Source of the backup volumeName:path  # noqa: E501

        :param path: The path of this ComGithubAppscodeStashApisStashV1alpha1FileGroup.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def retention_policy_name(self):
        """Gets the retention_policy_name of this ComGithubAppscodeStashApisStashV1alpha1FileGroup.  # noqa: E501

        retention policy of snapshots  # noqa: E501

        :return: The retention_policy_name of this ComGithubAppscodeStashApisStashV1alpha1FileGroup.  # noqa: E501
        :rtype: str
        """
        return self._retention_policy_name

    @retention_policy_name.setter
    def retention_policy_name(self, retention_policy_name):
        """Sets the retention_policy_name of this ComGithubAppscodeStashApisStashV1alpha1FileGroup.

        retention policy of snapshots  # noqa: E501

        :param retention_policy_name: The retention_policy_name of this ComGithubAppscodeStashApisStashV1alpha1FileGroup.  # noqa: E501
        :type: str
        """

        self._retention_policy_name = retention_policy_name

    @property
    def tags(self):
        """Gets the tags of this ComGithubAppscodeStashApisStashV1alpha1FileGroup.  # noqa: E501

        Tags of a snapshots  # noqa: E501

        :return: The tags of this ComGithubAppscodeStashApisStashV1alpha1FileGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ComGithubAppscodeStashApisStashV1alpha1FileGroup.

        Tags of a snapshots  # noqa: E501

        :param tags: The tags of this ComGithubAppscodeStashApisStashV1alpha1FileGroup.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComGithubAppscodeStashApisStashV1alpha1FileGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
